sudo: false

os: linux
language: python

group: travis_latest

git:
  depth: 3
  quiet: true
  submodules: false

branches:
  only:
    - /^v[\d.]+/
    - master
    - develop

stages:
  - Check
  - Test
  - name: Deploy
    if: repo = pyload/pyload AND branch = master

python: 3.6
dist: bionic

env:
  jobs: PYCURL_SSL_LIBRARY=openssl

before_cache: rm -f "$HOME/.cache/pip/log/debug.log"
cache: pip

install: pip install --upgrade tox tox-travis

script: tox --sitepackages

jobs:
  # fast_finish: true

  allow_failures:
    - stage: Deploy
    - name: Pylint Errors
    - name: Bandit Errors
    # - python: nightly
    - python: pypy3
    - os: osx
    - os: windows

  include:
    - stage: Check
      name: Compilation Errors
      script: tox -e compileall

    - stage: Check
      name: Pylint Errors
      script: tox -e pylint --sitepackages

    - stage: Check
      name: Bandit Errors
      script: tox -e bandit

    - stage: Test
      os: linux
      python: 3.6

    - stage: Test
      os: linux
      python: 3.7

    - stage: Test
      os: linux
      python: 3.8

    # - stage: Test
    #   os: linux
    #   python: nightly

    - stage: Test
      os: linux
      python: pypy3

    # NOTE: work-around to test Python on OSX (not supported officially)
    - stage: Test
      os: osx
      language: sh
      env:
        - TOXENV=py3
        - HOMEBREW_NO_INSTALL_CLEANUP=1
        - HOMEBREW_NO_ANALYTICS=1
      before_cache:
        # - brew cleanup
        - rm -f "$HOME/Library/Caches/pip/log/debug.log"
      cache:
        directories:
          # - "$HOME/Library/Caches/Homebrew"
          - "$HOME/Library/Caches/pip"
      addons:
        homebrew:
          # update: true
          packages: python3
      before_install:
        - python3 -m pip install --upgrade virtualenv
        - virtualenv -p python3 --system-site-packages "$HOME/venv"
        - source "$HOME/venv/bin/activate"

    # NOTE: work-around to test Python on Windows (not supported officially)
    - stage: Test
      os: windows
      language: sh
      env:
        - TOXENV=py3
        - PATH="/c/Python37:/c/Python37/Scripts:$PATH"
      before_cache: rm -f "$LOCALAPPDATA/pip/Cache/log/debug.log"
      cache:
        directories: "$LOCALAPPDATA/pip/Cache"
      before_install: choco install -y python3

    - stage: Deploy
      name: Github Release
      if: tag IS present
      install: pip install --upgrade Babel Jinja2 wheel
      script: python setup.py sdist build_locale bdist_wheel
      deploy:
        provider: releases
        api-key:
          secure: "LDbvOV6EIV2itKUOSQE24RctMJTj7trF8eRQIMQJFa50W/fT03HpHiRVzhddUo4UadzAy5XNm5fRZY5AMNOomQk023mHwTUuPIhQDLVl1Esati7OZpekhKE1v4+sbLfVvvv+rRuDfcn+qjiZ358UU6D4SuZ4zClu6hUxnt0Qc70="
        file_glob: true
        file: dist/*
        skip_cleanup: true

    - stage: Deploy
      name: PyPI Release
      env: PYLOAD_BUILD="$TRAVIS_BUILD_NUMBER"
      install: pip install --upgrade Babel Jinja2 readme_renderer[md]
      script: true
      deploy:
        provider: pypi
        user:
          secure: "IDWPXbVVMr9/sZOb5/p9bXTvq//EGuzQWM4CnQOm2G4mfaX0ssr7+4w+wweJgI9UJFIcoHmvYC0cjljCleSW1j+1G3GO7whInLUuD63Vt1iA8H4UIvg4JYcTwGZQ9R/PWoW0k5MHems0picgA3cMw/9VBfl3IUraGb6+2QdxpHY="
        password:
          secure: "eoe3SLOEa0Z7UxJI905InCzHatdDigIBt/fl7b6kOHy76IYU3e5lZ/c6urGJBOsy+1LN6vPHvWmVVw/vhevfTd8MM6i0cGXo23zIefYAU2zkjKejWyF2/tke6spngikC1vzEyANs9fNFLXU4USCfgr1lCvuuy9Znwl/sI6jqVTg="
        distributions: "sdist build_locale bdist_wheel"
        # skip_cleanup: true
        skip_existing: true

    - stage: Deploy
      name: Docker Release
      env:
        - PYLOAD_BUILD="$TRAVIS_BUILD_NUMBER"
        - secure: "dtCGQHfYizfV/u3nZ9lQZcNsb2eJrvCarJaZAuerOllqlsPzfpFFVJVmDpkwaCjs8qEEvflQOPO0o/uonUKQOSmWdcQaqmtMlRZ3JZEENWXAnLJDy/lfBflrR+An47vS5oNQ9bNcLMM7GBFbOxcXFGK6zScXnS2g8erXqymN46M="
        - secure: "TrWBa99CnrnJ/FYKhq20EYAhbjlLXVExQu5ScZczDYzVZYV1rLzENInyc8L7JVU1A6vSJ4lIKZ+BYMk03hSMSU8wIQPrKaKHLBfjgX6hww9gBHIdfhnM9yVhBS8NM+jwmGQBotFjiRsQVCg1Jhtd9YwpjCO6Gj4UBmNfxXt52tw="
      addons:
        apt:
          update: true
          packages: docker-ce
      services: docker
      before_install: docker --version
      install: pip install --upgrade docker-ci-deploy
      before_script: docker pull pyload/pyload || true
      script:
        - docker build --file Dockerfile --pull --cache-from pyload/pyload:ubuntu --tag pyload/pyload:ubuntu .
        - docker build --file Dockerfile.armhf --pull --cache-from pyload/pyload:ubuntu-arm32v7 --tag pyload/pyload:ubuntu-arm32v7 .
        - docker build --file Dockerfile.alpine --pull --cache-from pyload/pyload:alpine --tag pyload/pyload:alpine .
      after_script: docker images
      before_deploy:
        - docker run pyload/pyload:ubuntu
        - docker run pyload/pyload:ubuntu-arm32v7
        - docker run pyload/pyload:alpine
        - docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"
      deploy:
        - provider: script
          script:
            - dcd --tag ubuntu --tag latest pyload/pyload:ubuntu
            - dcd --tag ubuntu-arm32v7 pyload/pyload:ubuntu-arm32v7
            - dcd --tag alpine pyload/pyload:alpine
          skip_cleanup: true
        - provider: script
          script:
            - dcd --tag ubuntu --version "${TRAVIS_TAG#v}" pyload/pyload:ubuntu
            - dcd --tag ubuntu-arm32v7 --version "${TRAVIS_TAG#v}" pyload/pyload:ubuntu-arm32v7
            - dcd --tag alpine --version "${TRAVIS_TAG#v}" pyload/pyload:alpine
          skip_cleanup: true
          on:
            tags: true
# after_success:
# - if [ "$COVERAGE" = "true" ]; then coveralls || echo "failed"; fi
